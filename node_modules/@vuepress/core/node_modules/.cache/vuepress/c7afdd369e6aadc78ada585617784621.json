{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\新建文件夹\\新建文件夹\\23 - 个人博客\\pengBlog\\blog\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\新建文件夹\\新建文件夹\\23 - 个人博客\\pengBlog\\blog\\node_modules\\vuepress-plugin-sakura\\bin\\Sakura.vue?vue&type=style&index=0&id=821b4e14&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\新建文件夹\\新建文件夹\\23 - 个人博客\\pengBlog\\blog\\node_modules\\vuepress-plugin-sakura\\bin\\Sakura.vue","mtime":1681262510756},{"path":"C:\\Users\\Administrator\\Desktop\\新建文件夹\\新建文件夹\\23 - 个人博客\\pengBlog\\blog\\node_modules\\css-loader\\dist\\cjs.js","mtime":1680923941162},{"path":"C:\\Users\\Administrator\\Desktop\\新建文件夹\\新建文件夹\\23 - 个人博客\\pengBlog\\blog\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1676690328080},{"path":"C:\\Users\\Administrator\\Desktop\\新建文件夹\\新建文件夹\\23 - 个人博客\\pengBlog\\blog\\node_modules\\postcss-loader\\src\\index.js","mtime":1676690327847},{"path":"C:\\Users\\Administrator\\Desktop\\新建文件夹\\新建文件夹\\23 - 个人博客\\pengBlog\\blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1680923940906},{"path":"C:\\Users\\Administrator\\Desktop\\新建文件夹\\新建文件夹\\23 - 个人博客\\pengBlog\\blog\\node_modules\\vue-loader\\lib\\index.js","mtime":1676690328080}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiNjYW52YXNfc2FrdXJhewogICAgcG9pbnRlci1ldmVudHM6IG5vbmU7CiAgICBwb3NpdGlvbjogZml4ZWQ7CiAgICB0b3A6MDsKICAgIGxlZnQ6MDsKfQo="},{"version":3,"sources":["Sakura.vue"],"names":[],"mappings":";AAwMA;AACA;AACA;AACA;AACA;AACA","file":"Sakura.vue","sourceRoot":"node_modules/vuepress-plugin-sakura/bin","sourcesContent":["<template>\r\n    <div class=\"Sakura\">\r\n        <canvas id=\"canvas_sakura\" ref=\"canvas_sakura\" :style=\"{zIndex: zIndex}\"></canvas>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    class Sakura {\r\n        constructor (x, y, s, r, fn, that, img) {\r\n            this.x = x;\r\n            this.y = y;\r\n            this.s = s;\r\n            this.r = r;\r\n            this.fn = fn;\r\n            this.that = that;\r\n            this.img = img;\r\n        }\r\n        draw (cxt) {\r\n            // const img = new Image();\r\n            // if (!SAKURA_IMG.replace) {\r\n            //     img.src = require('./sakura.png'); //樱花效果图相对路径\r\n            // } else {\r\n            //     img.src = SAKURA_IMG.httpUrl; //樱花效果图路径\r\n            // }\r\n            cxt.save();\r\n            var xc = 40 * this.s / 4;\r\n            cxt.translate(this.x, this.y);\r\n            cxt.rotate(this.r);\r\n            cxt.drawImage(this.img, 0, 0, 40 * this.s, 40 * this.s)\r\n            cxt.restore();\r\n        }\r\n        update () {\r\n            this.x = this.fn.x(this.x, this.y);\r\n            this.y = this.fn.y(this.y, this.y);\r\n            this.r = this.fn.r(this.r);\r\n            if(this.x > window.innerWidth ||\r\n                this.x < 0 ||\r\n                this.y > window.innerHeight ||\r\n                this.y < 0\r\n            ) {\r\n                this.r = this.that.getRandom('fnr');\r\n                if(Math.random() > 0.4) {\r\n                    this.x = this.that.getRandom('x');\r\n                    this.y = 0;\r\n                    this.s = this.that.getRandom('s');\r\n                    this.r = this.that.getRandom('r');\r\n                } else {\r\n                    this.x = window.innerWidth;\r\n                    this.y = this.that.getRandom('y');\r\n                    this.s = this.that.getRandom('s');\r\n                    this.r = this.that.getRandom('r');\r\n                }\r\n            }\r\n        }\r\n    }\r\n    class SakuraList {\r\n        constructor () {\r\n            this.list = []\r\n        }\r\n        push (sakura) {\r\n            this.list.push(sakura);\r\n        }\r\n        update () {\r\n            for(var i = 0, len = this.list.length; i < len; i++) {\r\n                this.list[i].update();\r\n            }\r\n        }\r\n        draw (cxt) {\r\n            for(var i = 0, len = this.list.length; i < len; i++) {\r\n                this.list[i].draw(cxt);\r\n            }\r\n        }\r\n        get (i) {\r\n            return this.list[i];\r\n        }\r\n        size () {\r\n            return this.list.length;\r\n        }\r\n    }\r\n    export default {\r\n        name: 'Sakura',\r\n        data () {\r\n            return {\r\n                staticx: false,\r\n                stop: null,\r\n                num: SAKURA_NUM,\r\n                show: SAKURA_SHOW,\r\n                zIndex: SAKURA_ZINDEX\r\n            }\r\n        },\r\n        mounted () {\r\n            this.$nextTick(() => {\r\n                if (this.show) {\r\n                    this.startSakura()\r\n                }\r\n            })\r\n        },\r\n        methods: {\r\n            getRandom(option) {\r\n                var ret, random;\r\n                switch(option) {\r\n                    case 'x':\r\n                        ret = Math.random() * window.innerWidth;\r\n                        break;\r\n                    case 'y':\r\n                        ret = Math.random() * window.innerHeight;\r\n                        break;\r\n                    case 's':\r\n                        ret = Math.random();\r\n                        break;\r\n                    case 'r':\r\n                        ret = Math.random() * 6;\r\n                        break;\r\n                    case 'fnx':\r\n                        random = -0.5 + Math.random() * 1;\r\n                        ret = function(x, y) {\r\n                            return x + 0.5 * random - 1.7;\r\n                        };\r\n                        break;\r\n                    case 'fny':\r\n                        random = 1.5 + Math.random() * 0.7\r\n                        ret = function(x, y) {\r\n                            return y + random;\r\n                        };\r\n                        break;\r\n                    case 'fnr':\r\n                        random = Math.random() * 0.03;\r\n                        ret = function(r) {\r\n                            return r + random;\r\n                        };\r\n                        break;\r\n                }\r\n                return ret;\r\n            },\r\n            startSakura() {\r\n                let that = this\r\n                requestAnimationFrame = window.requestAnimationFrame ||\r\n                    window.mozRequestAnimationFrame ||\r\n                    window.webkitRequestAnimationFrame ||\r\n                    window.msRequestAnimationFrame ||\r\n                    window.oRequestAnimationFrame;\r\n                var canvas = document.getElementById('canvas_sakura');\r\n                this.staticx = true;\r\n                this.$refs.canvas_sakura.width = window.innerWidth;\r\n                this.$refs.canvas_sakura.height = window.innerHeight;\r\n                var cxt = this.$refs.canvas_sakura.getContext('2d');\r\n                var sakuraList = new SakuraList();\r\n                const img = new Image();\r\n                if (!SAKURA_IMG.replace) {\r\n                    img.src = require('./sakura.png'); //樱花效果图相对路径\r\n                } else {\r\n                    img.src = SAKURA_IMG.httpUrl; //樱花效果图路径\r\n                }\r\n                for(var i = 0; i < that.num; i++) {\r\n                    let sakura, randomX, randomY, randomS, randomR, randomFnx, randomFny, randomFnR;\r\n                    randomX = this.getRandom('x');\r\n                    randomY = this.getRandom('y');\r\n                    randomR = this.getRandom('r');\r\n                    randomS = this.getRandom('s');\r\n                    randomFnx = this.getRandom('fnx');\r\n                    randomFny = this.getRandom('fny');\r\n                    randomFnR = this.getRandom('fnr');\r\n                    sakura = new Sakura(randomX, randomY, randomS, randomR, {\r\n                        x: randomFnx,\r\n                        y: randomFny,\r\n                        r: randomFnR\r\n                    }, this, img);\r\n                    sakura.draw(cxt);\r\n                    sakuraList.push(sakura);\r\n                }\r\n                this.stop = requestAnimationFrame(function fn() {\r\n                    cxt.clearRect(0, 0, canvas.width, canvas.height);\r\n                    sakuraList.update();\r\n                    sakuraList.draw(cxt);\r\n                    that.stop = requestAnimationFrame(fn);\r\n                })\r\n            },\r\n            stopp() {\r\n                if(this.staticx) {\r\n                    var child = document.getElementById(\"canvas_sakura\");\r\n                    child.parentNode.removeChild(child);\r\n                    window.cancelAnimationFrame(this.stop);\r\n                    this.staticx = false;\r\n                } else {\r\n                    this.startSakura();\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    #canvas_sakura{\r\n        pointer-events: none;\r\n        position: fixed;\r\n        top:0;\r\n        left:0;\r\n    }\r\n</style>\r\n"]}]}